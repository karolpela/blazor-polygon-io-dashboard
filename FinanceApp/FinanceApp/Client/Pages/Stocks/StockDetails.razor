@using FinanceApp.Shared.Models.TickerList
@using FinanceApp.Shared.Models.TickerDetails
@using FinanceApp.Shared.Models
@using Syncfusion.Blazor.Charts
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider

<MudContainer Class="mt-4">
    @if (tickerResultsLogoDto != null)
    {
        <MudStack Spacing="4">
            <MudPaper Class="d-flex mt-4 pa-4" Elevation="2">
                <MudToggleIconButton Toggled="@SubscribedTo" ToggledChanged="@ToggleWatchlistAsync"
                                     Class="pa-0 ma-2" Style="position: absolute"
                                     Icon="@Icons.Material.Filled.FavoriteBorder" Title="Add to watchlist"
                                     ToggledIcon="@Icons.Material.Filled.Favorite" ToggledTitle="Remove from watchlist"/>

                <MudPaper Class="d-inline mr-4 pa-2" Height="200px" Width="200px" Elevation="0">
                    @if (tickerResultsLogoDto.LogoDto != null)
                    {
                        <MudImage Alt="Logo" Width="180" Height="180"
                                  ObjectFit="ObjectFit.ScaleDown" Src="@ConvertToBase64(tickerResultsLogoDto.LogoDto)"/>
                    }
                </MudPaper>
                @if (tickerResultsLogoDto.TickerResultsDto != null)
                {
                
                    <MudContainer Class="d-inline">
                        <StockOpenClose SelectedTicker="@SelectedTickerResult"
                                        OnDateSelected="UpdateChartAsync"/>
                    </MudContainer>
                }
            </MudPaper>
            <MudPaper Elevation="2">
                <SfStockChart @ref="sfStockChart">
                    <StockChartSeriesCollection>
                        <StockChartSeries DataSource="@StockChartDetails" Type="ChartSeriesType.Candle" XName="Date" YName="Close" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume"></StockChartSeries>
                    </StockChartSeriesCollection>
                </SfStockChart>
            </MudPaper>
        </MudStack>
    }
</MudContainer>

@code {

    [Parameter]
    public TickerListItemDto? SelectedTickerResult { get; set; }

    public bool SubscribedTo { get; set; }

    private TickerResultsLogoDto? tickerResultsLogoDto;

    private SfStockChart? sfStockChart;

    private async Task ToggleWatchlistAsync()
    {
        var username = await GetUsernameAsync();
        var usernameJson = JsonSerializer.Serialize(username);
        var content = new StringContent(usernameJson, Encoding.UTF8, "application/json");

        try
        {
            if (SubscribedTo)
            {
                await Http.DeleteAsync($"api/tickers/{SelectedTickerResult!.Ticker}/users/{username!.Normalize()}/");
    //TODO check if actually unsubscribed
                SubscribedTo = false;
            }
            else
            {
                await Http.PostAsync($"api/tickers/{SelectedTickerResult!.Ticker}/users/", content);
    //TODO check if actually subscribed
                SubscribedTo = true;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task<string?> GetUsernameAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        var username = state.User.Identity?.Name!.Replace("\'", "");
        return username;
    }

    private string ConvertToBase64(LogoDto logo)
    {
        if (logo.Format == "svg") logo.Format = "svg+xml";
        return $"data:image/{logo.Format};base64,{Convert.ToBase64String(logo.Data)}";
    }

    protected async Task UpdateChartAsync((DateTimeOffset date, string timespan, int multiplier) selection)
    {
        try
        {
            if (selection.timespan is "hour" or "minute")
            {
                selection.date = selection.date.AddHours(17.5);
            }

            var from = selection.date.ToUnixTimeMilliseconds();
            var to = DateTimeOffset.Now.ToUnixTimeMilliseconds();

            StockChartDetails = await Http.GetFromJsonAsync<List<StockChartData>>(
                    $"api/Tickers/{SelectedTickerResult.Ticker}/bars" +
                    $"?from={from}&to={to}" +
                    $"&timespan={selection.timespan}" +
                    $"&multiplier={selection.multiplier}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        sfStockChart?.UpdateStockChart();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (SelectedTickerResult != null)
        {
            try
            {
                var username = await GetUsernameAsync();

                var response = await Http.GetAsync($"api/tickers/{SelectedTickerResult.Ticker}/on-watchlist/{username}");
                SubscribedTo = response.IsSuccessStatusCode;

                tickerResultsLogoDto = await Http.GetFromJsonAsync<TickerResultsLogoDto>($"api/tickers/{SelectedTickerResult.Ticker}");

                await UpdateChartAsync((DateTimeOffset.Now.AddDays(-1), "minute", 30));
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine(ex.Message);

                //throw;
            }
        }
    }

    public List<StockChartData>? StockChartDetails { get; set; }
    // public List<StockChartData> StockChartDetails = new()
    // {
    //     new StockChartData { Date = new DateTime(2012, 04, 02), Open = 85.9757, High = 90.6657, Low = 85.7685, Close = 90.5257, Volume = 660187068 },
    //     new StockChartData { Date = new DateTime(2012, 04, 09), Open = 89.4471, High = 92, Low = 86.2157, Close = 86.4614, Volume = 912634864 },
    //     new StockChartData { Date = new DateTime(2012, 04, 16), Open = 87.1514, High = 88.6071, Low = 81.4885, Close = 81.8543, Volume = 1221746066 },
    //     new StockChartData { Date = new DateTime(2012, 04, 23), Open = 81.5157, High = 88.2857, Low = 79.2857, Close = 86.1428, Volume = 965935749 },
    //     new StockChartData { Date = new DateTime(2012, 04, 30), Open = 85.4, High = 85.4857, Low = 80.7385, Close = 80.75, Volume = 615249365 },
    //     new StockChartData { Date = new DateTime(2012, 05, 07), Open = 80.2143, High = 82.2685, Low = 79.8185, Close = 80.9585, Volume = 541742692 },
    //     new StockChartData { Date = new DateTime(2012, 05, 14), Open = 80.3671, High = 81.0728, Low = 74.5971, Close = 75.7685, Volume = 708126233 },
    //     new StockChartData { Date = new DateTime(2012, 05, 21), Open = 76.3571, High = 82.3571, Low = 76.2928, Close = 80.3271, Volume = 682076215 },
    //     new StockChartData { Date = new DateTime(2012, 05, 28), Open = 81.5571, High = 83.0714, Low = 80.0743, Close = 80.1414, Volume = 480059584 }
    // };

}