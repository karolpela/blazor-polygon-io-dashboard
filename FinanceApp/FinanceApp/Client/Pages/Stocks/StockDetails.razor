@using FinanceApp.Shared.Models
@using FinanceApp.Shared.Models.TickerDetails
@using Syncfusion.Blazor.Charts
@using System.Text.Json
@using System.Text
@using FinanceApp.Client.Pages.Stocks.News
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider

<MudContainer Class="my-4 d-flex" Style="height: 720px">
    @if (tickerResultsLogoDto != null)
    {
        <MudStack Class="mr-6" Style="Width: 80%" Spacing="4">
            <MudPaper Class="d-flex pa-4" Elevation="2">
                <MudToggleIconButton Toggled="@SubscribedTo" ToggledChanged="@ToggleWatchlistAsync"
                                     Class="pa-0 ma-2" Style="position: absolute"
                                     Icon="@Icons.Material.Filled.FavoriteBorder" Title="Add to watchlist"
                                     ToggledIcon="@Icons.Material.Filled.Favorite" ToggledTitle="Remove from watchlist"/>

                <MudPaper Class="d-inline mr-4 pa-2" Height="200px" Width="200px" Elevation="0">
                    @if (tickerResultsLogoDto.LogoDto != null)
                    {
                        <MudImage Alt="Logo" Width="180" Height="180"
                                  ObjectFit="ObjectFit.ScaleDown" Src="@ConvertToBase64(tickerResultsLogoDto.LogoDto)"/>
                    }
                </MudPaper>
                @if (tickerResultsLogoDto.TickerResultsDto != null)
                {
                    <MudContainer Class="d-inline">
                        <StockOpenClose SelectedTicker="@SelectedTicker"
                                        OnDateSelected="UpdateChartAsync"/>
                    </MudContainer>
                }
            </MudPaper>
            @if (StockChartDetails != null && StockChartDetails.Count != 0)
            {
                <MudPaper Class="pa-2" Elevation="2">
                    <SfStockChart @ref="sfStockChart" EnableSelector="false" EnablePeriodSelector="false">
                        <StockChartPrimaryXAxis>
                            <StockChartAxisMajorGridLines Width="0" Color="grey"></StockChartAxisMajorGridLines>
                            <StockChartAxisMinorGridLines Width="0" Color="grey"></StockChartAxisMinorGridLines>
                        </StockChartPrimaryXAxis>

                        <StockChartSeriesCollection>
                            <StockChartSeries DataSource="@StockChartDetails" Type="ChartSeriesType.HiloOpenClose" XName="Date" YName="Close" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume"></StockChartSeries>
                        </StockChartSeriesCollection>
                    </SfStockChart>
                </MudPaper>
            }
        </MudStack>
        <NewsList SelectedTicker="@SelectedTicker"/>
    }
</MudContainer>

@code {

    [Parameter]
    public string? SelectedTicker { get; set; }

    public List<StockChartDataDto>? StockChartDetails { get; set; }

    public bool SubscribedTo { get; set; }

    private TickerResultsLogoDto? tickerResultsLogoDto;

    private SfStockChart? sfStockChart;

    private async Task ToggleWatchlistAsync()
    {
        var username = await GetUsernameAsync();
        var usernameJson = JsonSerializer.Serialize(username);
        var content = new StringContent(usernameJson, Encoding.UTF8, "application/json");

        try
        {
            if (SubscribedTo)
            {
                await Http.DeleteAsync($"api/tickers/{SelectedTicker}/users/{username!.Normalize()}/");
            }
            else
            {
                await Http.PostAsync($"api/tickers/{SelectedTicker}/users/", content);
            }
            await UpdateWatchlistStatusAsync();
        }
        catch (HttpRequestException)
        {
            Console.WriteLine("Unable to change watchlist status");
        }
    }

    private async Task<string?> GetUsernameAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        var username = state.User.Identity?.Name!.Replace("\'", "");
        return username;
    }

    public static string ConvertToBase64(LogoDto logo)
    {
        if (logo.Format == "svg") logo.Format = "svg+xml";
        return $"data:image/{logo.Format};base64,{Convert.ToBase64String(logo.Data)}";
    }

    protected async Task UpdateChartAsync((DateTime utcFrom, string timespan, int multiplier) selection)
    {
        try
        {
    // utcFrom is already set back a selected amount
            var fromUnix = ((DateTimeOffset)selection.utcFrom).ToUnixTimeMilliseconds();
            var toUnix = DateTimeOffset.UtcNow.AddDays(-1).ToUnixTimeMilliseconds(); // today's data is hardly available

            StockChartDetails = await Http.GetFromJsonAsync<List<StockChartDataDto>>(
                $"api/Tickers/{SelectedTicker}/bars" +
                $"?fromUnix={fromUnix}&toUnix={toUnix}" +
                $"&timespan={selection.timespan}" +
                $"&multiplier={selection.multiplier}");
        }
        catch (HttpRequestException)
        {
            StockChartDetails = null;
        }
        sfStockChart?.UpdateStockChart();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(SelectedTicker))
        {
            tickerResultsLogoDto = null;
            return;
        }

        try
        {
            await UpdateWatchlistStatusAsync();

            tickerResultsLogoDto = await Http.GetFromJsonAsync<TickerResultsLogoDto>($"api/tickers/{SelectedTicker}");

            await UpdateChartAsync((DateTime.Now.AddDays(-1), "minute", 30));
        }
        catch (HttpRequestException)
        {
            tickerResultsLogoDto = null;
            throw;
        }
    }

    private async Task UpdateWatchlistStatusAsync()
    {
        var username = await GetUsernameAsync();

        try
        {
            var response = await Http.GetAsync($"api/users/{username}/watching/{SelectedTicker}");
            SubscribedTo = response.IsSuccessStatusCode;
        }
        catch (HttpRequestException)
        {
            Console.WriteLine("Unable to refresh watchlist status");
        }
    }
}