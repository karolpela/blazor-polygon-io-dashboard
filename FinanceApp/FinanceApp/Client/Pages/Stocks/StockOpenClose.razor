@using FinanceApp.Shared.Models.TickerList
@using FinanceApp.Shared.Models
@inject HttpClient Http

<MudStack Class="align-start">
    <MudButtonGroup Color="Color.Primary">
        <MudButton @onclick="@(() => SetFromAsync("Last day"))">Last day</MudButton>
        <MudButton @onclick="@(() => SetFromAsync("1 week ago"))">1 week ago</MudButton>
        <MudButton @onclick="@(() => SetFromAsync("1 month ago"))">1 month ago</MudButton>
        <MudButton @onclick="@(() => SetFromAsync("3 months ago"))">3 months ago</MudButton>
    </MudButtonGroup>

    @if (dailyOpenClose != null)
    {
        <MudGrid Spacing="2">
            @foreach (var property in dailyOpenClose.GetType().GetProperties())
            {
                @if (property.Name == "Status") continue;

                <MudItem xs="4">
                    <MudPaper Elevation="1" Class="d-flex justify-space-between px-2 py-1">
                        <MudText Style="@($"color:{Colors.Grey.Darken2};")">@property.Name</MudText>
                        <MudText>
                            <b>@property.GetValue(dailyOpenClose)</b>
                        </MudText>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <p class="pa-2">No data available for selected date</p>
    }
</MudStack>


@code {

    [Parameter]
    public TickerListItemDto? SelectedTicker { get; set; }

    public string From { get; set; } = $"{DateTime.Now.AddDays(-1):yyyy-MM-dd}";

    private DailyOpenCloseDto? dailyOpenClose;

    private async Task SetFromAsync(string offset)
    {
        var date = offset switch
        {
            "Last day" => DateTime.Now.AddDays(-1),
            "1 week ago" => DateTime.Now.AddDays(-7),
            "1 month ago" => DateTime.Now.AddMonths(-1),
            "3 months ago" => DateTime.Now.AddMonths(-3),
            _ => DateTime.Now.AddDays(-1)
            };
        From = $"{date:yyyy-MM-dd}";
        try
        {
            dailyOpenClose = await Http.GetFromJsonAsync<DailyOpenCloseDto>($"api/tickers/{SelectedTicker!.Ticker}/open-close/{From}");
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            dailyOpenClose = null;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedTicker != null)
        {
            await SetFromAsync("Last day");
        }
    }

}