@using FinanceApp.Shared.Models
@using FinanceApp.Shared.Models.Tickers
@using static System.Net.Mime.MediaTypeNames
@inject IHttpClientFactory ClientFactory

@if (dailyOpenClose != null && logoString != null)
{
       <MudPaper Class="d-flex align-center mt-4 pa-4" Elevation="2">
       <MudImage Class="pa-8" Width="200" Height="null" Src="@logoString"/>
        <MudGrid Spacing="2">
            @foreach (var property in dailyOpenClose.GetType().GetProperties())
            {
                @if (property.Name == "Status") continue;

                <MudItem xs="4">
                    <MudPaper Elevation="1" Class="d-flex justify-space-between px-3 py-1">
                        <MudText Style="@($"color:{Colors.Grey.Darken2};")">@property.Name</MudText>
                        <MudText><b>@property.GetValue(dailyOpenClose)</b></MudText>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
}


@code {
    [Parameter]
    public Result? SelectedTicker { get; set; }

    private DailyOpenClose? dailyOpenClose;

    private string? logoString;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedTicker != null)
        {
            try
            {
                var client = ClientFactory.CreateClient("FinanceApp.ServerAPI");
                dailyOpenClose = await client.GetFromJsonAsync<DailyOpenClose>($"api/tickers/{SelectedTicker.Ticker}/open-close/");

                var logoArray = await client.GetByteArrayAsync("https://localhost:7144/api/tickers/AAPL/logo/");
                logoString = $"data:image/svg+xml;base64,{@System.Convert.ToBase64String(logoArray)}";
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
