@using FinanceApp.Shared.Models.TickerList
@using FinanceApp.Shared.Models
@using Syncfusion.Blazor.Charts
@inject HttpClient Http

<MudStack Class="align-start">
    <MudButtonGroup Color="Color.Primary">
        <MudButton @onclick="@((args) => DateSelected(args, DateTime.UtcNow.AddDays(-1),"minute", 30))">Last day</MudButton>
        <MudButton @onclick="@((args) => DateSelected(args, DateTime.UtcNow.AddDays(-7),"hour", 3))">1 week ago</MudButton>
        <MudButton @onclick="@((args) => DateSelected(args, DateTime.UtcNow.AddMonths(-1),"day", 1))">1 month ago</MudButton>
        <MudButton @onclick="@((args) => DateSelected(args, DateTime.UtcNow.AddMonths(-3),"week", 1))">3 months ago</MudButton>
    </MudButtonGroup>

    @if (dailyOpenClose != null)
    {
        <MudGrid Spacing="2">
            @foreach (var property in dailyOpenClose.GetType().GetProperties())
            {
                @if (property.Name == "Status") continue;

                <MudItem xs="4">
                    <MudPaper Elevation="1" Class="d-flex justify-space-between px-2 py-1">
                        <MudText Style="@($"color:{Colors.Grey.Darken2};")">@property.Name</MudText>
                        <MudText>
                            <b>@property.GetValue(dailyOpenClose)</b>
                        </MudText>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <p class="pa-2">No data available for selected date</p>
    }
</MudStack>


@code {

    [Parameter]
    public TickerListItemDto? SelectedTicker { get; set; }

    [Parameter]
    public EventCallback<(DateTime,string,int)> OnDateSelected { get; set; }

    public DateTime SelectedDate { get; set; } = DateTime.Now;

    private DailyOpenCloseDto? dailyOpenClose;

    private async Task DateSelected(MouseEventArgs e, DateTime date, string timespan, int multiplier)
    {
        await OnDateSelected.InvokeAsync((date, timespan, multiplier));
        await UpdateOpenCloseAsync(date);
    }

    private async Task UpdateOpenCloseAsync(DateTime date)
    {
        try
        {
            dailyOpenClose = await Http.GetFromJsonAsync<DailyOpenCloseDto>($"api/tickers/{SelectedTicker!.Ticker}/open-close/{SelectedDate:yyyy-MM-dd}");
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            dailyOpenClose = null;
        }
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     if (SelectedTicker != null)
    //     {
    //         await SetDateAsync("Last day");
    //     }
    // }
    protected override async Task OnInitializedAsync()
    {
        if (SelectedTicker != null)
        {
            await UpdateOpenCloseAsync(DateTime.Now.AddDays(-1));
        }
    }
}