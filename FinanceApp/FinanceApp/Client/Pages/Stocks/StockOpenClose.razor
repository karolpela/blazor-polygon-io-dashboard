@using FinanceApp.Shared.Models
@inject HttpClient Http

<MudStack Class="align-start">
    <MudButtonGroup Class="my-2 align-center" Color="Color.Primary">
        <MudButton @onclick="@(args => DateSelected(args, DateTime.UtcNow.AddDays(-1), "minute", 30))">Last day</MudButton>
        <MudButton @onclick="@(args => DateSelected(args, DateTime.UtcNow.AddDays(-7), "hour", 3))">1 week ago</MudButton>
        <MudButton @onclick="@(args => DateSelected(args, DateTime.UtcNow.AddMonths(-1), "day", 1))">1 month ago</MudButton>
        <MudButton @onclick="@(args => DateSelected(args, DateTime.UtcNow.AddMonths(-3), "week", 1))">3 months ago</MudButton>
    </MudButtonGroup>

    @if (dailyOpenClose != null)
    {
        <MudGrid Spacing="2">
            @foreach (var property in dailyOpenClose.GetType().GetProperties())
            {
                @if (property.Name == "Status") continue;

                <MudItem xs="4">
                    <MudPaper Elevation="1" Class="d-flex justify-space-between px-2 py-1">
                        <MudText Style="@($"color:{Colors.Grey.Darken2};")">@property.Name</MudText>
                        <MudText>
                            <b>@property.GetValue(dailyOpenClose)</b>
                        </MudText>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <p class="pa-2">No data available for selected date</p>
    }
</MudStack>


@code {

    [Parameter]
    public string? SelectedTicker { get; set; }

    private string? previousTicker;

    [Parameter]
    public EventCallback<(DateTime,string,int)> OnDateSelected { get; set; }

    private DateTime previousDateTime;

    private DailyOpenCloseDto? dailyOpenClose;

    private async Task DateSelected(MouseEventArgs e, DateTime date, string timespan, int multiplier)
    {
        await OnDateSelected.InvokeAsync((date, timespan, multiplier));
        await UpdateOpenCloseAsync(date);
    }

    private async Task UpdateOpenCloseAsync(DateTime date)
    {
        if (date.Date == previousDateTime.Date && dailyOpenClose != null && SelectedTicker == previousTicker)
        {
            return;
        }
        try
        {
            dailyOpenClose = await Http.GetFromJsonAsync<DailyOpenCloseDto>($"api/tickers/{SelectedTicker}/open-close/{date:yyyy-MM-dd}");
            previousDateTime = date;
            previousTicker = SelectedTicker;
        }
        catch (HttpRequestException)
        {
            dailyOpenClose = null;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedTicker != null && SelectedTicker != previousTicker)
        {
            await UpdateOpenCloseAsync(DateTime.Now.AddDays(-1));
        }
    }
}