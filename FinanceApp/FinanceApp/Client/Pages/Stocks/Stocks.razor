@inject HttpClient Http
@inject IConfiguration Configuration
@page "/stocks"
@using FinanceApp.Shared.Models.TickerList

<h1>Stocks</h1>

@if (tickers != null)
{
    <MudAutocomplete T="TickerListItemDto" Label="NASDAQ common stocks" @bind-Value="SelectedTicker"
                     AutoFocus=true
                     SearchFunc="@SearchStock" ResetValueOnEmptyText=true
                     ToStringFunc="@(r => r == null ? null : $"{r.Ticker} - {r.Name}")"/>
    <ErrorBoundary @ref="errorBoundary">
        <ChildContent>
            <StockDetails SelectedTickerResult="@SelectedTicker"/>
        </ChildContent>
        <ErrorContent>
            <p class="pt-4">
                <b>Service unavailable and no cached data present</b>
            </p>
        </ErrorContent>
    </ErrorBoundary>
}
else
{
    <p>Loading stock search...</p>
}

@code {
    private List<TickerListItemDto>? tickers;

    private TickerListItemDto? _selectedTicker;

    public TickerListItemDto? SelectedTicker
    {
        get => _selectedTicker;
        set
        {
            _selectedTicker = value;
            errorBoundary?.Recover();
        }
    }

    private ErrorBoundary? errorBoundary;

    protected override async Task OnInitializedAsync()
    {
        tickers = await Http.GetFromJsonAsync<List<TickerListItemDto>>("api/tickers/");
    }

    private async Task<IEnumerable<TickerListItemDto>> SearchStock(string value)
    {
        return await Task.Run(() =>
        {
            if (tickers == null)
            {
                return Array.Empty<TickerListItemDto>();
            }

            if (string.IsNullOrEmpty(value))
            {
                return tickers;
            }
            return tickers.Where(t => t.Ticker.Contains(value, StringComparison.InvariantCultureIgnoreCase) ||
                                      t.Name!.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        });
    }

}