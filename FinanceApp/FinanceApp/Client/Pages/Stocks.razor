@using System.Text.Json
@using System.Linq
@using FinanceApp.Shared.Models.Tickers
@using FinanceApp.Shared.Models.TickerDetails
@inject HttpClient httpClient
@inject IConfiguration Configuration
@page "/stocks"

<h3>Stocks</h3>

<MudAutocomplete T="Result" Label="NASDAQ common stocks" @bind-Value="SelectedTicker"
                 AutoFocus=true
                 SearchFunc="@SearchStock" ResetValueOnEmptyText=true
                 ToStringFunc="@(r => r == null ? null : $"{r.Ticker} - {r.Name}")" />

<TickerView SelectedTicker="@SelectedTicker" />

@code {
    private Tickers? Tickers;
    private Result? SelectedTicker;

    //private async Task InitTickersAsync()
    //{
    //    try
    //    {
    //        Tickers = await httpClient.GetFromJsonAsync<Tickers>("api/tickers/");
    //    }
    //    catch (HttpRequestException ex)
    //    {
    //        Console.WriteLine(ex);
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {

        Tickers = await httpClient.GetFromJsonAsync<Tickers>("api/tickers/");
    }

    private async Task<IEnumerable<Result>> SearchStock(string value)
    {
        return await Task<IEnumerable<Result>>.Run(() =>
        {
            if (Tickers == null)
            {
                return new Result[0];
            }

            if (string.IsNullOrEmpty(value))
            {
                return Tickers.Results;
            }
            else
            {
                return Tickers.Results.Where(r => r.Ticker.Contains(value, StringComparison.InvariantCultureIgnoreCase) ||
                r.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
            }
        });
    }
}
